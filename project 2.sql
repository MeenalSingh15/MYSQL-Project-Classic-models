#1. Find the top 10 customers who have placed the most orders. Display customer name and the count of orders placed.
use classicmodels ;
SELECT c.customerName,COUNT(o.orderNumber) AS orderCount
FROM customers c
JOIN orders o ON c.customerNumber = o.customerNumber
GROUP BY c.customerNumber, c.customerName
ORDER BY orderCount DESC
LIMIT 10;
#2. Retrieve the list of customers who have placed orders but haven't made any payments yet.
SELECT c.customerName
FROM customers c
JOIN orders o ON c.customerNumber = o.customerNumber
LEFT JOIN payments p ON c.customerNumber = p.customerNumber
WHERE p.amount IS NULL
GROUP BY c.customerName;
     
     /*3. Retrieve a product that has been ordered the least number of times.
     Display the product code, product name, and the number of times it has been ordered.*/
     
SELECT p.productCode, p.productName,
    COUNT(od.orderNumber) AS ordCount
FROM products p
LEFT JOIN orderdetails od ON p.productCode = od.productCode 
GROUP BY p.productCode, p.productName
ORDER BY ordCount ASC LIMIT 1;

/*4. Classic Models has a product line called "Vintage Cars." 
The management wants to know the total revenue 
generated by this product line in the last quarter of the year 2003 (from October to December). 
Write a MySQL stored procedure that takes no input parameters 
and returns total revenue of the "Vintage Cars" product line for the last quarter of 2003.*/
DELIMITER //

CREATE PROCEDURE GetVintageCarsRevenue()
BEGIN
    SELECT SUM(od.quantityOrdered * od.priceEach) AS totalRevenue
    FROM orderdetails od
    JOIN orders o ON od.orderNumber = o.orderNumber
    JOIN products p ON od.productCode = p.productCode
    WHERE p.productLine = 'Vintage Cars' AND o.orderDate >= '2003-10-01'
        AND o.orderDate <= '2003-12-31';
END //
DELIMITER ;
CALL GetVintageCarsRevenue();

/*5. Write an SQL query using CTE's and window functions 
inside it to retrieve the top 5 customers along with their total order values across all orders.*/
WITH CustomerOrderTotals AS (
    SELECT c.customerNumber,c.customerName,SUM(od.quantityOrdered * od.priceEach) AS totalOrderValue,
        RANK() OVER (ORDER BY SUM(od.quantityOrdered * od.priceEach) DESC) AS num
    FROM customers c
    JOIN orders o ON c.customerNumber = o.customerNumber
    JOIN orderdetails od ON o.orderNumber = od.orderNumber
    GROUP BY c.customerNumber, c.customerName
)
SELECt customerNumber,customerName,totalOrderValue
FROM CustomerOrderTotals
WHERE num <= 5;


select *from employees ;






    

